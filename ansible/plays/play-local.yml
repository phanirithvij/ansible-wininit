---
# TODO make everything a role or find a source which provide cross platfrom
# # especially alpine and windows roles
# TODO copy config file from github yadm/chezmoi/dotdrop/...
- hosts: localhost
  # NOTE: connection local sped up by 6 secs 23s -> 17s
  connection: local
  gather_facts: true
  # NOTE: gathering only required facts for now (env vars)
  # https://stackoverflow.com/questions/71692791/is-it-possible-to-gather-only-specific-facts-in-ansible
  gather_subset:
    - "env"
    - "!all"
    - "!min"
  name: setup machine
  tasks:
    - name: echo verbosity
      debug:
        msg: "{{ansible_verbosity}}"
    - name: setting up local alpine machine
      block:
        - name: setting up go, gup and packages
          environment:
            PATH: "{{ ansible_env.HOME }}/go/bin:{{ ansible_env.PATH }}"
            GOBIN: "{{ ansible_env.HOME }}/go/bin"
          block:
            - name: install go
              community.general.apk:
                name: go
                state: latest
              tags: [go]
            # TODO write a gup role/collection
            - name: check if gup is installed
              ansible.builtin.shell: |
                command -v gup
              register: gup_exists
              ignore_errors: true
              changed_when: false
              tags: [go]
            - name: install gup
              when: gup_exists is failed
              ansible.builtin.command: go install -v -ldflags="-s -w" github.com/nao1215/gup@latest
              tags: [go]
            - name: check if gup config exists
              ansible.builtin.stat:
                path: ~/.config/gup/gup.conf
              register: stat_result
            - name: gup config found install gup (go) tools
              ansible.builtin.command: gup import
              when: stat_result.stat.exists
              tags: [go]
            - name: gup config not found fallback to manual install
              when: not stat_result.stat.exists
              block:
                - name: check go tool is installed
                  vars:
                    bin_n: "{{ item.bin_n if (item.package is defined) else (item.split('/') | last | split('@') | first) }}"
                    package: "{{ item.package | default(item) }}"
                  ansible.builtin.shell:  |
                    go version -m $GOBIN/{{ bin_n }} | grep path
                  register: package_status
                  ignore_errors: true
                  changed_when: false
                  loop:
                    # cross platform packages
                    - github.com/dundee/gdu/v5/cmd/gdu@latest
                    - github.com/distatus/battery/cmd/battery@latest
                    - github.com/muesli/duf@latest
                    - package: github.com/schollz/croc/v9@latest
                      bin_n: croc
                    # windows only
                    # github.com/stochmal/checkpath-go
                  tags: [go]
                - name: go install manual tools
                  ansible.builtin.command: go install -ldflags="-w -s" {{item}}
                  tags: [go]
                  loop: "{{ package_status.results | rejectattr('rc', 'eq', 0) | map(attribute='item') | list }}"
                  when: package_status.failed
                  # TODO gup export task after the above
                  # creates: ~/.config/gup/gup.conf
            - name: add gobin to path bashrc
              ansible.builtin.blockinfile:
                dest: ~/.bashrc
                marker: "# {mark} ansible managed gobin"
                block: |
                    export GOBIN=~/go/bin
                    export PATH=$PATH:$GOBIN
              tags: [go]
            - name: setting up rust toolchain and rust packages
              environment:
                PATH: "{{ ansible_env.HOME }}/.cargo/bin:{{ ansible_env.PATH }}"
              block:
                - name: check if cargo is installed
                  ansible.builtin.shell: |
                    command -v cargo
                  register: cargo_exists
                  ignore_errors: true
                  changed_when: false
                  tags: [rust]
                - name: install build-base, rustup, sccache
                  when: cargo_exists is failed
                  # NOTE: ansible.builtin.package resolves to this and as of now I am only using alpine and nothing else
                  # so to kind of speed it up I added this directly.
                  # TODO move back to ansible.builtin.package once I write roles for win/linux (using scoop/choco based on windows host os condition)
                  # linux should work with ansible.builtin.package no need for detection i.e. pacman/apk/apt etc.
                  community.general.apk:
                    name: build-base,rustup,sccache
                    state: present
                  tags: [rust]
                - name: install rustup toolchain
                  when: cargo_exists is failed
                  ansible.builtin.shell: |
                    rustup-init -y --profile minimal
                    source ~/.cargo/env
                    rustup default stable
                  args:
                    creates: ~/.cargo/bin/cargo
                  tags: [rust]
                - name: create cargo config file
                  ansible.builtin.copy:
                    content: ""
                    mode: '0644'
                    dest: ~/.cargo/config.toml
                    force: false
                  tags: [rust]
                - name: configure cargo to use sccache
                  ansible.builtin.blockinfile:
                    path: ~/.cargo/config.toml
                    marker: "# {mark} ansible managed cargo config"
                    block: |
                      [build]
                      rustc-wrapper = "sccache"
                  tags: [rust]
                # TODO: if possible detect if cargo-update is not latest and then and only then
                #       install these and else ignore
                - name: build dependecies for cargo-update
                  community.general.apk:
                    name: pkgconf,openssl-dev
                    state: latest
                  tags: [rust]
                # navi not in alpine 3.17.4 repos, it is in 3.18 and edge
                # TODO: log to file and tail -f it to see realtime progress
                - name: install cargo tools
                  community.general.cargo:
                    name: topgrade,cargo-update,navi
                    state: latest
                  tags: [rust]
            - name: setting up dev environment
              environment:
                PATH: "{{ ansible_env.HOME }}/.cargo/bin:{{ ansible_env.HOME }}/go/bin:{{ ansible_env.PATH }}"
              block:
                - name: setting up prompt
                  block:
                    # TODO: chsh to fish with shadow
                    # TODO: have a minimal-wsl playbook which only installs ansible and nothing else
                    # NOTE: apk add fish is auto installing navi, lf, fzf fish plugins via apk trigger
                    - name: fish, zoxide, starship
                      community.general.apk:
                        name: fish,zoxide,starship
                        state: latest
                      tags: [dev]
                - name: install lf, fish, fzf, micro, nvim
                  community.general.apk:
                    name: lf,fish,fzf,micro,neovim
                    state: latest
                  tags: [dev]
                # lf setup
                - name: make sure lf config dir exists
                  ansible.builtin.file:
                    mode: '755'
                    path: ~/.config/lf
                    state: directory
                  tags: [dev, config]
                - name: create lf config file
                  ansible.builtin.copy:
                    mode: '0644'
                    content: ""
                    dest: ~/.config/lf/lfrc
                    force: false
                  tags: [dev, config]
                - name: configure lf
                  ansible.builtin.blockinfile:
                    path: ~/.config/lf/lfrc
                    marker: "# {mark} ansible managed lfrc"
                    block: |
                        set hidden!
                  tags: [dev, config]
                - name: get navi config path
                  changed_when: false
                  ansible.builtin.command: navi info config-path
                  register: navi_config_dir
                  tags: [rust, dev, config]
                - name: get navi example config
                  changed_when: false
                  ansible.builtin.command: navi info config-example
                  register: navi_config_example
                  tags: [rust, dev, config]
                # NOTE: https://github.com/denisidoro/navi/blob/master/docs/config_file.md
                # navi setup (default config comes with skim, zsh, overwrite it with the example one which is fzf, bash)
                - name: make sure navi config dir exists
                  ansible.builtin.file:
                    mode: '755'
                    path: "{{ navi_config_dir.stdout | dirname }}"
                    state: directory
                  tags: [rust, dev, config]
                - name: create navi config file
                  ansible.builtin.copy:
                    mode: '0644'
                    content: ""
                    dest: "{{ navi_config_dir.stdout }}"
                    force: false
                  tags: [rust, dev, config]
                - name: configure navi
                  ansible.builtin.blockinfile:
                    marker: "# {mark} ansible managed navi config"
                    path: "{{ navi_config_dir.stdout }}"
                    block: "{{ navi_config_example.stdout }}"
                  tags: [rust, dev, config]
                - name: configure navi widget
                  ansible.builtin.blockinfile:
                    path: ~/.bashrc
                    marker: "# {mark} ansible managed navi widget"
                    block: |
                        navi widget bash > /tmp/navi_widget.sh
                        source /tmp/navi_widget.sh
                  tags: [rust, dev, config]
